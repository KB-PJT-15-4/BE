<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.moa.trip.mapper.TripMapper">
    <!--    사용자가 생성하거나 참여한 여행 총 개수-->
    <select id="countTripsByMemberId" resultType="int">
        SELECT COUNT(*)
        FROM trip t
                 INNER JOIN trip_member tm ON t.trip_id = tm.trip_id
        WHERE tm.member_id = #{memberId}
        -- locationName 파라미터가 있으면 필터링 조건 추가
        <if test="locationName != null and locationName != ''">
            AND t.trip_location = #{locationName}
        </if>
    </select>
    <!--    사용자가 생성하거나 참여한 여행 페이징 된 리스트-->
    <select id="findTripsByMemberId" resultType="org.moa.trip.dto.trip.TripListResponseDto">
        SELECT
            t.trip_id     AS tripId,
            t.trip_name   AS tripName,
            t.start_date  AS startDate,
            t.end_date    AS endDate,
            t.trip_location AS locationName,

            -- 여행 상태 결정
            CASE
                WHEN CURDATE() BETWEEN t.start_date AND t.end_date THEN '여행중'
                WHEN CURDATE() &lt; t.start_date THEN '여행예정'
                WHEN CURDATE() &gt; t.end_date THEN '여행종료'
                ELSE '여행중'
                END AS status

        FROM trip t
                 INNER JOIN trip_member tm ON t.trip_id = tm.trip_id
        WHERE tm.member_id = #{memberId}
        -- locationName 파라미터가 있으면 필터링 조건 추가
        <if test="locationName != null and locationName != ''">
            AND t.trip_location = #{locationName}
        </if>

        ORDER BY
            -- 여행 1차 정렬: 여행중 > 여행예정 > 여행종료
            CASE
                WHEN CURDATE() BETWEEN t.start_date AND t.end_date THEN 1
                WHEN CURDATE() &lt; t.start_date THEN 2
                WHEN CURDATE() &gt; t.end_date THEN 3
                ELSE 1
                END,
            -- 2차 정렬: 여행중, 여행예정 -> 시작날짜일 기준으로 오름차순, 여행종료 -> 종료 날짜일 기준 내림차순
            CASE WHEN CURDATE() &lt; t.start_date THEN t.start_date END,
            CASE WHEN CURDATE() BETWEEN t.start_date AND t.end_date THEN t.start_date END,
            CASE WHEN CURDATE() &gt; t.end_date THEN t.end_date END DESC

            LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
    </select>
    <select id="searchTripById" resultType="org.moa.trip.entity.Trip">
        SELECT *
        FROM trip
        WHERE trip_id = #{tripId}
    </select>
    <insert id="insert" parameterType="org.moa.trip.entity.Trip" useGeneratedKeys="true" keyProperty="tripId">
        INSERT INTO trip (member_id,
                          trip_name,
                          trip_location,
                          start_date,
                          end_date,
                          created_at,
                          updated_at
        )
        VALUES (#{memberId},
                #{tripName},
                #{tripLocation},
                #{startDate},
                #{endDate},
                #{createdAt},
                #{updatedAt}
               )
    </insert>
    <select id="searchDayByTripId" resultType="java.time.LocalDateTime">
        SELECT day
        FROM trip_day
        WHERE trip_id = #{tripId}
    </select>
    <insert id="insertTripDays">
        INSERT INTO trip_day(
                             trip_id,
                             day
        )
        VALUES
            <foreach collection="tripDays" item="tripDay" separator=",">
                (
                #{tripDay.tripId},
                #{tripDay.day}
                )
            </foreach>
    </insert>
    <select id="findTripDayId" resultType="long">
        SELECT trip_day_id
        FROM trip_day
        WHERE trip_id = #{tripId}
                  AND day = #{day}
    </select>
    <select id="searchTripLocations" resultType="org.moa.trip.entity.TripLocation">
        SELECT *
        FROM trip_location
    </select>
    <select id="searchIdsByDays" resultType="java.lang.Long">
        SELECT id
        FROM trip_day
        WHERE DATE(day) IN
        <foreach collection="recordDays" item="date" open="(" separator="," close=")">
            DATE(#{date})
        </foreach>
    </select>
    <select id="searchByTripId" resultType="org.moa.trip.entity.TripDay">
        SELECT *
        FROM trip_day
        WHERE trip_id = #{tripId}
    </select>

    <select id="findUpcomingTripByMemberId" resultType="org.moa.trip.dto.trip.UpcomingTripResponseDto">
        SELECT
            t.trip_id       AS tripId,
            t.trip_name     AS title,
            t.start_date    AS startDate,
            t.end_date      AS endDate,
            t.trip_location AS locationName,
            (SELECT COUNT(*) FROM trip_member tm2 WHERE tm2.trip_id = t.trip_id) AS memberCount,
            CASE
                WHEN CURDATE() BETWEEN t.start_date AND t.end_date THEN '여행중'
                ELSE '여행예정'
            END AS status
        FROM
            trip t
                JOIN
            trip_member tm ON t.trip_id = tm.trip_id
        WHERE
            tm.member_id = #{memberId}
          -- 아직 끝나지 않은 모든 여행을 대상으로 조회
          AND t.end_date >= CURDATE()
        ORDER BY
            -- 여행 중인 여행을 최우선으로 정렬
            CASE
                WHEN CURDATE() BETWEEN t.start_date AND t.end_date THEN 1
                ELSE 2
            END,
            -- 그 다음으로 시작일이 빠른 순서로 정렬
            t.start_date ASC
        LIMIT 1
    </select>
</mapper>
