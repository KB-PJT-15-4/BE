<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.moa.trip.mapper.TripRecordMapper">

    <insert id="insertTripRecord" useGeneratedKeys="true" keyProperty="recordId" parameterType="org.moa.trip.entity.TripRecord">
        INSERT INTO TRIP_RECORDS (trip_id, title, record_date, content)
        VALUES (#{tripId}, #{title}, #{recordDate}, #{content})
    </insert>

    <!-- recordId로 여행 기록 조회 -->
    <select id="findRecordById" parameterType="long" resultType="org.moa.trip.entity.TripRecord">
        SELECT
            record_id,
            trip_id,
            title,
            record_date,
            content,
            created_at,
            updated_at
        FROM
            TRIP_RECORDS
        WHERE
            record_id = #{recordId}
    </select>

    <!-- 여행 일자별 여행 기록 조회
        1:N 관계 조회를 위한 resultMap 정의
        - id: PK 컬럼
        - result: 1에 해당하는 컬럼들
        - collection: N에 해당하는 컬럼들을 List 형태로 매핑
    -->
    <resultMap id="recordWithImagesMap" type="org.moa.trip.dto.record.TripRecordCardDto">
        <id property="recordId" column="record_id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="recordDate" column="record_date"/>
        <collection property="imageUrls" ofType="string">
            <result column="image_url"/>
        </collection>
    </resultMap>

    <select id="findRecordsByDate" resultMap="recordWithImagesMap">
        SELECT
            r.record_id,
            r.title,
            r.content,
            r.record_date,
            i.image_url
        FROM
            (
                -- 먼저 페이지네이션에 맞는 record_id 목록만 정확하게 가져옴.
                SELECT record_id
                FROM TRIP_RECORDS
                WHERE trip_id = #{tripId} AND record_date = #{date}
                ORDER BY record_id DESC
                    LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
            ) AS paged_ids -- 이 결과를 paged_ids 라는 임시 테이블(Derived Table)로 만듦.
                JOIN
            TRIP_RECORDS r ON paged_ids.record_id = r.record_id -- 원본 테이블과 조인
                LEFT JOIN
            TRIP_RECORD_IMAGES i ON r.record_id = i.record_id -- 이미지 테이블을 조인
        ORDER BY
            r.record_id DESC
    </select>

    <select id="countRecordsByDate" resultType="int">
        SELECT COUNT(*)
        FROM TRIP_RECORDS
        WHERE trip_id = #{tripId} AND record_date = #{date}
    </select>

    <!--특정 여행 기록에 속한 이미지 url 목록 조회-->
    <select id="findImageUrlsByRecordId" resultType="string">
        SELECT image_url
        FROM TRIP_RECORD_IMAGES
        WHERE record_id = #{recordId}
    </select>

    <!--recordId와 tripId로 여행 기록 조회-->
    <select id="findRecordByTripIdAndRecordId" resultType="org.moa.trip.entity.TripRecord">
        SELECT
            record_id,
            trip_id,
            title,
            record_date,
            content,
            created_at,
            updated_at
        FROM
            TRIP_RECORDS
        WHERE
            record_id = #{recordId} AND trip_id = #{tripId}
    </select>

    <!-- 기타: 목록 조회, 단건 조회, 수정, 삭제 등도 여기에 계속 추가 -->

</mapper>
